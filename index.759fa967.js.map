{"mappings":"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","sources":["src/scripts/app.js"],"sourcesContent":["const refs = {\n    currencyList: document.querySelector('.currency-list'),\n    currencyForm: document.querySelector('.currency-form'),\n    inputFromValue: document.querySelector('[name=\"fromQuantity\"]'),\n    inputToValue: document.querySelector('[name=\"toQuantity\"]'),\n    selectFromValue: document.querySelector('[name=\"fromNameMoney\"]'),\n    selectToValue: document.querySelector('[name=\"toNameMoney\"]'),\n    convertBtn: document.querySelectorAll('.currency-form button')[0],\n    resetBtn: document.querySelectorAll('.currency-form button')[1],\n}\n\nlet money = {}\n\nconst UAH = {    \n    cc: \"UAH\",\n    exchangedate: \"21.11.2022\",\n    r030: 980,\n    rate: 1,\n    txt: \"Гривня\"\n}\n\nconsole.log(UAH)\n\nrefs.currencyForm.addEventListener('change', onInputValue)\nrefs.currencyForm.addEventListener('submit', onClickBtnConvert)\nrefs.resetBtn.addEventListener('click', onClickBtnReset)\n\nrefs.inputFromValue.addEventListener('blur', onInputLostFocus)\n\ndrawCurrency()\n\nfunction onClickBtnConvert(event) {\n    event.preventDefault()\n    console.log(money)\n    let { fromQuantity, fromNameMoney, toQuantity, toNameMoney } = money\n\n    fetchCurrency()\n    .then(data => {\n        console.log(data)\n\n        data = [...data, UAH]\n        \n        const fromMoney = data.find(country => country.cc === fromNameMoney)\n        console.log(fromMoney)\n\n        const toMoney = data.find(country => country.cc === toNameMoney)\n        console.log(toMoney)\n        \n\n        if (fromQuantity) {\n            toQuantity = Number(fromQuantity) * fromMoney.rate / toMoney.rate\n            console.log(toQuantity)\n            refs.inputToValue.value = toQuantity\n            return\n        }\n\n        if (toQuantity) {\n            fromQuantity = Number(toQuantity) * toMoney.rate / fromMoney.rate\n            console.log(fromQuantity)\n            refs.inputFromValue.value = fromQuantity\n        }\n            \n\n        })\n    .catch(error => {\n        console.log(error)\n    })\n}\n\nfunction onInputValue(event) {\n    const formData = new FormData(refs.currencyForm)\n\n    formData.forEach((value, key) => {\n        money[key] = value\n\n        if (key === 'fromQuantity' && value !== '') {\n            refs.inputToValue.setAttribute('disabled', true)\n            // console.log(key + 'iside from' + value)\n        }\n\n        if (key === 'toQuantity' && value !== '') {\n            refs.inputFromValue.setAttribute('disabled', true)\n            // console.log(key + 'iside to' + value)\n        }\n    })\n}\n\nfunction onInputLostFocus(event) {\n    event.target.classList.add('invalid')\n    // console.log()\n}\n\nfunction onClickBtnReset() {\n    refs.inputToValue.removeAttribute('disabled')\n    refs.inputFromValue.removeAttribute('disabled')\n}\n\nfunction drawCurrency() {\n    fetchCurrency()\n        .then(data => {\n            // console.log(data)\n\n            data = [...data, UAH]\n            let USD, EUR\n\n            const money = data.map(name => {\n                if (name.cc === 'USD') {\n                    USD = name.rate\n                }\n\n                if (name.cc === 'EUR') {\n                    EUR = name.rate\n                }        \n                return name\n            })\n\n            // console.log(money)\n\n            const markupCurrencyToday = currencyToday(USD, EUR)\n            refs.currencyList.insertAdjacentHTML('beforeend', markupCurrencyToday)\n\n            const markupSelect = money.map(item => {\n                return addOptionToSelect(item.cc, item.txt)\n            }).join('')\n\n            //add options to form\n            refs.selectFromValue.insertAdjacentHTML('beforeend', markupSelect)\n            refs.selectToValue.insertAdjacentHTML('beforeend', markupSelect)\n        })\n    .catch(error => {\n        console.log(error)\n        const msg = '<li>Sorry not data from server</li>'\n        refs.currencyList.insertAdjacentHTML('beforeend', msg)\n    })\n}\n\nfunction fetchCurrency() {\n    const URL = 'https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?json'\n\n    return fetch(URL).then((response) =>{\n        if(!response.ok){\n            throw new Error(response.status);\n        }\n        return response.json();\n    }).catch(function (error) {\n        // Notify.failure('Oops, there is no country with that name');\n        console.log(error);\n    });\n}\n\nfunction currencyToday(USD, EUR) {\n    return `<li class=\"currency-item\">\n                <b>1 USD = </b>${USD} UAH\n            </li>\n            <li class=\"currency-item\">\n                <b>1 EUR = </b>${EUR} UAH\n            </li>`\n}\n\nfunction addOptionToSelect(nameMoney, desc) {\n    return `<option value=${nameMoney}>${nameMoney} - ${desc}</option> `\n}"],"names":["$c4e35ae0e9947bd2$var$refs","currencyList","document","querySelector","currencyForm","inputFromValue","inputToValue","selectFromValue","selectToValue","convertBtn","querySelectorAll","resetBtn","$c4e35ae0e9947bd2$var$money","$c4e35ae0e9947bd2$var$UAH","cc","exchangedate","r030","rate","txt","$c4e35ae0e9947bd2$var$fetchCurrency","fetch","then","response","ok","Error","status","json","catch","error","console","log","addEventListener","event","FormData","forEach","value","key","setAttribute","preventDefault","fromQuantity","fromNameMoney","toQuantity","toNameMoney","data","fromMoney","find","country","toMoney","Number","removeAttribute","target","classList","add","USD","EUR","money","map","name","markupCurrencyToday","$c4e35ae0e9947bd2$var$currencyToday","insertAdjacentHTML","markupSelect","item","nameMoney","desc","join"],"version":3,"file":"index.759fa967.js.map"}